{
  "record_id": "idx_95::2ac::gpt-3.5-turbo::seed0",
  "task_id": "idx_95",
  "category": "2ac",
  "entry_point": "check_dict_case",
  "prompt_field": "prompt2ac",
  "prompt_text": "\ndef check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if some or all keys are strings in lower \n    case or some or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return True.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return True.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return False.\n    \"\"\"\n",
  "prompt_final": "You are an expert software developer who writes high quality code. With below information, please either generate Python3 code (Respond directly with code only with markdown), or ask clarifying questions:\n\ndef check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if some or all keys are strings in lower \n    case or some or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return True.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return True.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return False.\n    \"\"\"",
  "prompt_sha256": "6666e066fc0af835c108719f01b118245b2156107fe42f7d5dbac14cbe3ef218",
  "model_name": "gpt-3.5-turbo",
  "seed": 0,
  "gen_params": {
    "max_new_tokens": 256,
    "temperature": 1.0,
    "top_p": 0.95,
    "do_sample": true,
    "repetition_penalty": 1.0
  },
  "generated_text": "```python\ndef check_dict_case(dict):\n    if not dict:\n        return False\n    lower_case_keys = all(isinstance(key, str) and key.islower() for key in dict.keys())\n    upper_case_keys = all(isinstance(key, str) and key.isupper() for key in dict.keys())\n    return lower_case_keys or upper_case_keys\n\n# Test cases\nprint(check_dict_case({\"a\": \"apple\", \"b\": \"banana\"}))  # False\nprint(check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"}))  # True\nprint(check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"}))  # True\nprint(check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}))  # True\nprint(check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"}))  # False\n```",
  "gen_raw": {},
  "contains_code": true,
  "code_detected_method": "fenced",
  "extracted_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    lower_case_keys = all(isinstance(key, str) and key.islower() for key in dict.keys())\n    upper_case_keys = all(isinstance(key, str) and key.isupper() for key in dict.keys())\n    return lower_case_keys or upper_case_keys\n\n# Test cases\nprint(check_dict_case({\"a\": \"apple\", \"b\": \"banana\"}))  # False\nprint(check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"}))  # True\nprint(check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"}))  # True\nprint(check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}))  # True\nprint(check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"}))  # False",
  "is_question": false,
  "extracted_questions": [],
  "question_count": 0,
  "first_question": null,
  "question_chars": 0,
  "latency_sec": 1.563875675201416,
  "committee_label": null,
  "evaluator_quality": null,
  "evaluator_answers": null
}