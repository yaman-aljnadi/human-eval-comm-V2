{
  "record_id": "idx_56::1a::gpt-3.5-turbo::seed0",
  "task_id": "idx_56",
  "category": "1a",
  "entry_point": "correct_bracketing",
  "prompt_field": "prompt1a",
  "prompt_text": "\n\ndef candidate(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening brackets have K corresponding closing brackets.\n\n    >>> candidate(\"<\")\n    False\n    >>> candidate(\"<>\")\n    True\n    >>> candidate(\"<<><>>\")\n    True\n    >>> candidate(\"><<>\")\n    False\n    \"\"\"\n",
  "prompt_final": "You are an expert software developer who writes high quality code. With below information, please either generate Python3 code (Respond directly with code only with markdown), or ask clarifying questions:\n\ndef candidate(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening brackets have K corresponding closing brackets.\n\n    >>> candidate(\"<\")\n    False\n    >>> candidate(\"<>\")\n    True\n    >>> candidate(\"<<><>>\")\n    True\n    >>> candidate(\"><<>\")\n    False\n    \"\"\"",
  "prompt_sha256": "48fd86e1c970bf8469e2b0413eee8a74fc100040affa2105e0829e75652cfc8a",
  "model_name": "gpt-3.5-turbo",
  "seed": 0,
  "gen_params": {
    "max_new_tokens": 256,
    "temperature": 1.0,
    "top_p": 0.95,
    "do_sample": true,
    "repetition_penalty": 1.0
  },
  "generated_text": "```python\ndef candidate(brackets: str):\n    stack = []\n    K = 1\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\" and stack and stack[-1] == \"<\":\n            stack.pop()\n        else:\n            return False\n    return len(stack) == 0\n```",
  "gen_raw": {},
  "contains_code": true,
  "code_detected_method": "fenced",
  "extracted_code": "def candidate(brackets: str):\n    stack = []\n    K = 1\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\" and stack and stack[-1] == \"<\":\n            stack.pop()\n        else:\n            return False\n    return len(stack) == 0",
  "is_question": false,
  "extracted_questions": [],
  "question_count": 0,
  "first_question": null,
  "question_chars": 0,
  "latency_sec": 0.7620835304260254,
  "committee_label": null,
  "evaluator_quality": null,
  "evaluator_answers": null
}