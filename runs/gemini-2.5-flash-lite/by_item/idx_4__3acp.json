{
  "record_id": "idx_4::3acp::gemini-2.5-flash-lite::seed0",
  "task_id": "idx_4",
  "category": "3acp",
  "entry_point": "mean_absolute_deviation",
  "prompt_field": "prompt3acp",
  "prompt_text": "from typing import List\n\n\ndef candidate(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation.   >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.5\n    \"\"\"\n",
  "prompt_final": "You are an expert software developer who writes high quality code. With below information, please either generate Python3 code (Respond directly with code only with markdown), or ask clarifying questions:\n\nfrom typing import List\n\n\ndef candidate(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation.   >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.5\n    \"\"\"",
  "prompt_sha256": "f0c976e914f71f1e004ebe9fae1035b8fcdb3b6fa6b181b8c3748ea33e649230",
  "model_name": "gemini-2.5-flash-lite",
  "seed": 0,
  "gen_params": {
    "max_new_tokens": 256,
    "temperature": 1.0,
    "top_p": 0.95,
    "do_sample": true,
    "repetition_penalty": 1.0
  },
  "generated_text": "```python\nfrom typing import List\n\n\ndef candidate(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation.   >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.5\n    \"\"\"\n    if not numbers:\n        return 0.0\n\n    mean = sum(numbers) / len(numbers)\n    absolute_deviations = [abs(x - mean) for x in numbers]\n    mad = sum(absolute_deviations) / len(absolute_deviations)\n    return mad\n```",
  "gen_raw": {},
  "contains_code": true,
  "code_detected_method": "fenced",
  "extracted_code": "from typing import List\n\n\ndef candidate(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation.   >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.5\n    \"\"\"\n    if not numbers:\n        return 0.0\n\n    mean = sum(numbers) / len(numbers)\n    absolute_deviations = [abs(x - mean) for x in numbers]\n    mad = sum(absolute_deviations) / len(absolute_deviations)\n    return mad",
  "is_question": false,
  "extracted_questions": [],
  "question_count": 0,
  "first_question": null,
  "question_chars": 0,
  "latency_sec": 1.0420401096343994,
  "committee_label": null,
  "evaluator_quality": null,
  "evaluator_answers": null
}