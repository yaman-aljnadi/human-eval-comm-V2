{
  "record_id": "idx_61::2cp::gemini-2.5-flash-lite::seed0",
  "task_id": "idx_61",
  "category": "2cp",
  "entry_point": "correct_bracketing",
  "prompt_field": "prompt2cp",
  "prompt_text": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n\n    >>> correct_bracketing(\"(\")\n    True\n    \"\"\"\n",
  "prompt_final": "You are an expert software developer who writes high quality code. With below information, please either generate Python3 code (Respond directly with code only with markdown), or ask clarifying questions:\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n\n    >>> correct_bracketing(\"(\")\n    True\n    \"\"\"",
  "prompt_sha256": "b3776f8e38b17c5b7076bc729d85497e373406d49219a785d6b47e39995bf5d2",
  "model_name": "gemini-2.5-flash-lite",
  "seed": 0,
  "gen_params": {
    "max_new_tokens": 256,
    "temperature": 1.0,
    "top_p": 0.95,
    "do_sample": true,
    "repetition_penalty": 1.0
  },
  "generated_text": "```python\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n\n    >>> correct_bracketing(\"(\")\n    True\n    >>> correct_bracketing(\")\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"()(\")\n    True\n    >>> correct_bracketing(\"())\")\n    False\n    >>> correct_bracketing(\"(())\")\n    True\n    >>> correct_bracketing(\"(()\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    >>> correct_bracketing(\"\")\n    True\n    \"\"\"\n    balance = 0\n    for char in brackets:\n        if char == '(':\n            balance += 1\n        elif char == ')':\n            balance -= 1\n        if balance < 0:  # More closing than opening brackets at any point\n            return False\n    return True # If balance is 0, all brackets are matched, otherwise there are unmatched opening brackets\n```",
  "gen_raw": {},
  "contains_code": true,
  "code_detected_method": "fenced",
  "extracted_code": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n\n    >>> correct_bracketing(\"(\")\n    True\n    >>> correct_bracketing(\")\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"()(\")\n    True\n    >>> correct_bracketing(\"())\")\n    False\n    >>> correct_bracketing(\"(())\")\n    True\n    >>> correct_bracketing(\"(()\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    >>> correct_bracketing(\"\")\n    True\n    \"\"\"\n    balance = 0\n    for char in brackets:\n        if char == '(':\n            balance += 1\n        elif char == ')':\n            balance -= 1\n        if balance < 0:  # More closing than opening brackets at any point\n            return False\n    return True # If balance is 0, all brackets are matched, otherwise there are unmatched opening brackets",
  "is_question": false,
  "extracted_questions": [],
  "question_count": 0,
  "first_question": null,
  "question_chars": 0,
  "latency_sec": 1.4723694324493408,
  "committee_label": null,
  "evaluator_quality": null,
  "evaluator_answers": null
}