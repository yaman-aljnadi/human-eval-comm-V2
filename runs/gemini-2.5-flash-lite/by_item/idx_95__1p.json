{
  "record_id": "idx_95::1p::gemini-2.5-flash-lite::seed0",
  "task_id": "idx_95",
  "category": "1p",
  "entry_point": "check_dict_case",
  "prompt_field": "prompt1p",
  "prompt_text": "\ndef check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in.\n    \"\"\"\n",
  "prompt_final": "You are an expert software developer who writes high quality code. With below information, please either generate Python3 code (Respond directly with code only with markdown), or ask clarifying questions:\n\ndef check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in.\n    \"\"\"",
  "prompt_sha256": "25707e577aafeab675cca0034db5acbbadbc4635b8cd88714351876ab91c9c53",
  "model_name": "gemini-2.5-flash-lite",
  "seed": 0,
  "gen_params": {
    "max_new_tokens": 256,
    "temperature": 1.0,
    "top_p": 0.95,
    "do_sample": true,
    "repetition_penalty": 1.0
  },
  "generated_text": "```python\ndef check_dict_case(data: dict) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings and either\n    all keys are in lower case or all keys are in upper case.\n    Returns False otherwise, including if any key is not a string.\n    \"\"\"\n    if not data:\n        return True  # An empty dictionary trivially satisfies the condition\n\n    all_keys_are_strings = all(isinstance(key, str) for key in data.keys())\n    if not all_keys_are_strings:\n        return False\n\n    first_key = next(iter(data.keys()))\n    is_lower = first_key.islower()\n    is_upper = first_key.isupper()\n\n    if not is_lower and not is_upper:\n        return False  # First key is not strictly lower or upper case\n\n    for key in data.keys():\n        if is_lower and not key.islower():\n            return False\n        if is_upper and not key.isupper():\n            return False\n\n    return True\n```",
  "gen_raw": {},
  "contains_code": true,
  "code_detected_method": "fenced",
  "extracted_code": "def check_dict_case(data: dict) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings and either\n    all keys are in lower case or all keys are in upper case.\n    Returns False otherwise, including if any key is not a string.\n    \"\"\"\n    if not data:\n        return True  # An empty dictionary trivially satisfies the condition\n\n    all_keys_are_strings = all(isinstance(key, str) for key in data.keys())\n    if not all_keys_are_strings:\n        return False\n\n    first_key = next(iter(data.keys()))\n    is_lower = first_key.islower()\n    is_upper = first_key.isupper()\n\n    if not is_lower and not is_upper:\n        return False  # First key is not strictly lower or upper case\n\n    for key in data.keys():\n        if is_lower and not key.islower():\n            return False\n        if is_upper and not key.isupper():\n            return False\n\n    return True",
  "is_question": false,
  "extracted_questions": [],
  "question_count": 0,
  "first_question": null,
  "question_chars": 0,
  "latency_sec": 1.5550241470336914,
  "committee_label": null,
  "evaluator_quality": null,
  "evaluator_answers": null
}