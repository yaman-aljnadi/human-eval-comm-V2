{
  "record_id": "idx_6::1c::deepseek-ai/deepseek-coder-6.7b-instruct::seed0",
  "task_id": "idx_6",
  "category": "1c",
  "entry_point": "parse_nested_parens",
  "prompt_field": "prompt1c",
  "prompt_text": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (() ()) has maximum two levels of nesting while ((( ))) has three.\n\n    >>> parse_nested_parens('(()())((()))()((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n",
  "prompt_final": "You are an expert software developer who writes high quality code. With below information, please either generate Python3 code (Respond directly with code only with markdown), or ask clarifying questions:\n\nfrom typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (() ()) has maximum two levels of nesting while ((( ))) has three.\n\n    >>> parse_nested_parens('(()())((()))()((())()())')\n    [2, 3, 1, 3]\n    \"\"\"",
  "prompt_sha256": "949e9143269af64f97a778d3771cccd798d9c6d63337de7fe7a48209971baed2",
  "model_name": "deepseek-ai/deepseek-coder-6.7b-instruct",
  "seed": 0,
  "gen_params": {
    "max_new_tokens": 256,
    "temperature": 1.0,
    "top_p": 0.95,
    "do_sample": true,
    "repetition_penalty": 1.0
  },
  "generated_text": "You are an expert software developer who writes high quality code. With below information, please either generate Python3 code (Respond directly with code only with markdown), or ask clarifying questions:\n\nfrom typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (() ()) has maximum two levels of nesting while ((( ))) has three.\n\n    >>> parse_nested_parens('(()())((()))()((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    # YOUR CODE GOES HERE\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n\n\"\"\"\nMy Code:\n\"\"\"\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    for group in paren_string.split(' '):\n        stack = []\n        max_len = 0\n        for char in group:\n            if char == '(':\n                stack.append(char)\n            else:\n                if len(stack) > max_len:\n                    max_len = len(stack)\n                stack.pop()\n        result.append(max_len)\n    return result\n\n#tests/test_solution.py\nimport pytest\nfrom script import parse_nested_parens\n\ndef test_parse_nested_parens():\n    assert parse_nested_parens('(()())((()))()((())()())') == [2, 3, 1, 3]\n    assert parse_nested_parens('()()()()",
  "gen_raw": {},
  "contains_code": true,
  "code_detected_method": "def-scan",
  "extracted_code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (() ()) has maximum two levels of nesting while ((( ))) has three.\n\n    >>> parse_nested_parens('(()())((()))()((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    # YOUR CODE GOES HERE\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n\n\"\"\"\nMy Code:\n\"\"\"\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    for group in paren_string.split(' '):\n        stack = []\n        max_len = 0\n        for char in group:\n            if char == '(':\n                stack.append(char)\n            else:\n                if len(stack) > max_len:\n                    max_len = len(stack)\n                stack.pop()\n        result.append(max_len)\n    return result\n\n#tests/test_solution.py\nimport pytest\nfrom script import parse_nested_parens\n\ndef test_parse_nested_parens():\n    assert parse_nested_parens('(()())((()))()((())()())') == [2, 3, 1, 3]\n    assert parse_nested_parens('()()()()",
  "is_question": false,
  "extracted_questions": [],
  "question_count": 0,
  "first_question": null,
  "question_chars": 0,
  "latency_sec": 44.436331272125244,
  "committee_label": null,
  "evaluator_quality": null,
  "evaluator_answers": null
}