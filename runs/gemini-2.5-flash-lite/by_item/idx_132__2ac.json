{
  "record_id": "idx_132::2ac::gemini-2.5-flash-lite::seed0",
  "task_id": "idx_132",
  "category": "2ac",
  "entry_point": "is_nested",
  "prompt_field": "prompt2ac",
  "prompt_text": "\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least three or two or one bracket in the subsequence is nested.\n\n    is_nested('[[]]') ➞ False\n    is_nested('[]]]]]]][[[[[]') ➞ True\n    is_nested('[][]') ➞ True\n    is_nested('[]') ➞ True\n    is_nested('[[][]]') ➞ False\n    is_nested('[[]][[') ➞ False\n    '''\n",
  "prompt_final": "You are an expert software developer who writes high quality code. With below information, please either generate Python3 code (Respond directly with code only with markdown), or ask clarifying questions:\n\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least three or two or one bracket in the subsequence is nested.\n\n    is_nested('[[]]') ➞ False\n    is_nested('[]]]]]]][[[[[]') ➞ True\n    is_nested('[][]') ➞ True\n    is_nested('[]') ➞ True\n    is_nested('[[][]]') ➞ False\n    is_nested('[[]][[') ➞ False\n    '''",
  "prompt_sha256": "30a58d47a1e5e82203f89b19a39cb4558ce2965f71f7aa795620044d4d5075bb",
  "model_name": "gemini-2.5-flash-lite",
  "seed": 0,
  "gen_params": {
    "max_new_tokens": 256,
    "temperature": 1.0,
    "top_p": 0.95,
    "do_sample": true,
    "repetition_penalty": 1.0
  },
  "generated_text": "```python\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets\n    where at least three or two or one bracket in the subsequence is nested.\n\n    is_nested('[[]]') ➞ False\n    is_nested('[]]]]]]][[[[[]') ➞ True\n    is_nested('[][]') ➞ True\n    is_nested('[]') ➞ True\n    is_nested('[[][]]') ➞ False\n    is_nested('[[]][[') ➞ False\n    '''\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                stack.pop()\n                # If we pop and the stack is not empty, it means the current ']'\n                # closes a '[' that was inside another '['. This signifies nesting.\n                if stack:\n                    return True\n            else:\n                # Unmatched closing bracket, invalid sequence but not relevant for our nesting check\n                pass\n",
  "gen_raw": {},
  "contains_code": true,
  "code_detected_method": "def-scan",
  "extracted_code": "def is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets\n    where at least three or two or one bracket in the subsequence is nested.\n\n    is_nested('[[]]') ➞ False\n    is_nested('[]]]]]]][[[[[]') ➞ True\n    is_nested('[][]') ➞ True\n    is_nested('[]') ➞ True\n    is_nested('[[][]]') ➞ False\n    is_nested('[[]][[') ➞ False\n    '''\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                stack.pop()\n                # If we pop and the stack is not empty, it means the current ']'\n                # closes a '[' that was inside another '['. This signifies nesting.\n                if stack:\n                    return True\n            else:\n                # Unmatched closing bracket, invalid sequence but not relevant for our nesting check\n                pass",
  "is_question": false,
  "extracted_questions": [],
  "question_count": 0,
  "first_question": null,
  "question_chars": 0,
  "latency_sec": 1.1425158977508545,
  "committee_label": null,
  "evaluator_quality": null,
  "evaluator_answers": null
}